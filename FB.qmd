---
title: "Professional Précis Fuzzing Book"
subtitle: "Preston Smith"
---

## **FB1** Introduction to Software Testing

It is important to test your code and be able to understand it. You can test your code by
putting in inputs you know the expected outcome for and compare or you can write a test
case for it which will automatically test and compare the actual output and the set expected
output for you. In some cases you can even in a way generate a test case the **Fuzzingbook**
has a really good example of this.

```python
def assertEquals(x, y, epsilon=1e-8):
    assert abs(x - y) < epsilon
```
This is for testing a Square root function as $\sqrt{n} * \sqrt{n} = n$.
Since that is always true you don't really need a test case for different types
of numbers. You should also check for invalid inputs so if someone trys to put
a string into something that calculates squares thats obviously not going to
work so your code should account for that in someway. **Fuzzingbook** has another
good example of this

```python
def sqrt_program(arg: str) -> None:  # type: ignore
    try:
        x = float(arg)
    except ValueError:
        print("Illegal Input")
    else:
        if x < 0:
            print("Illegal Number")
        else:
            print('The root of', x, 'is', my_sqrt(x))
```

### Use-case
Overall writing test cases and testing your code can be very beneficial not only
for chasten but anything you do as it will make your code more polished proffesional
and easier to use for anyone trying to.

## **FB2** Code Coverage

Code Coverage is very important when writing test cases because you want to strive
for as much of your code being tested as possible. So being able to check the
effectiveness and coverage is crucial when writing good test cases. An example on
how you can test this is in the **Fuzzing Book** where there is a library with functions
like .trace() and .coverage() which list what lines are in a given function and one
returns what lines of code are atleast run once. and using these librarys there was
code that prints out code with the run lines marked by a **#** symbol

### Use-case

This can be very useful when working on chasten to test if your the test cases being
written and already there are doing there job properly. One of the last things you
want is for you test your code think it works but a significant portion of it not
being tested and maybe their is some major bug that is missed as a result. This is
even more important when making software other people are going to use because then
alot more things can go wrong because the code may need to adapt to different computers
causing more issues that could be missed by testing.

## **FB3** Fuzzing

The basic idea of fuzzing is to test as many possible reasonable inputs as possible so if
you have a function that is supposed to receive a string. Then you can create a fuzzing
generator that creates a string of random characters and with that and a runner to run the
code you can test the limits of that specific function or program. This is a great way to
test your code with unorthodox inputs and while they may be unlikely it can still help find.
greater problems like let’s say you have a program that can only take a certain length of 
string before it crashes or if you’re doing something with math and a weird number or abnormally
large number causes crashes or bugs. A fuzzer is a great way to help find these issues as 
there are so many different numbers and characters that can possibly be used by the code as
inputs that having something to just check as many possibilities as possible can help improve
the programs efficiency and robustness.

### The **FuzzingBook** has a great example of a basic fuzzer:

```python
def fuzzer(max_length: int = 100, char_start: int = 32, char_range: int = 32) -> str:
    """A string of up to `max_length` characters
       in the range [`char_start`, `char_start` + `char_range`)"""
    string_length = random.randrange(0, max_length + 1)
    out = ""
    for i in range(0, string_length):
        out += chr(random.randrange(char_start, char_start + char_range))
    return out
```

### Use-case

This can be a very useful concept for helping to uncover bugs as in my experience with chasten
I've found a lot of bugs by just running the program with expected outputs. So, I can only 
imagine how many there are when there’s a lot of information it must sort through or when there’s
an unexpected input which isn't necessarily a bug, but it very well could be and the concept of 
something checking multiple different inputs and possibilities may help uncover many obscure bug
and issues.
