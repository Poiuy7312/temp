---
title: "Professional Précis Fuzzing Book"
subtitle: "Preston Smith"
---

## **FB1** Introduction to Software Testing

It is important to test your code and be able to understand it. You can test your code by
putting in inputs you know the expected outcome for and compare or you can write a test-case
for it which will automatically test and compare the actual output and the set expected
output for you. In some cases you can even in a way generate a test case of the **Fuzzingbook**
has a really good example of this.

```python
def assertEquals(x, y, epsilon=1e-8):
    assert abs(x - y) < epsilon
```
This is for testing a Square root function as $\sqrt{n} * \sqrt{n} = n$.
Since that is always true you don't need a test case for different types
of numbers. You should also check for invalid inputs so if someone tries to put
a string into something that calculates squares that's not going to
work so your code should account for that in some way. **Fuzzingbook** has another
good example of this

```python
def sqrt_program(arg: str) -> None:  # type: ignore
    try:
        x = float(arg)
    except ValueError:
        print("Illegal Input")
    else:
        if x < 0:
            print("Illegal Number")
        else:
            print('The root of', x, 'is', my_sqrt(x))
```

### Use-case
Overall writing test cases and testing your code can be very beneficial not only
for chasten but anything you do as it will make your code more polished and professional
and easier to use for anyone trying to.

## **FB2** Code Coverage

Code Coverage is very important when writing test cases because you want to strive
for as much of your code being tested as possible. So being able to check the
effectiveness and coverage are crucial when writing good test cases. An example on
how you can test this in the **Fuzzing Book** where there is a library with functions
like .trace() and .coverage() which list what lines are in a given function and one
returns what lines of code are at least run once. and using these libraries there was
code that prints out code with the run lines marked by a **#** symbol

### Use-case

This can be very useful when working on chasten to test if the test cases being
written and already there are doing their job properly. One of the last things you
want is for you to test your code think it works but a significant portion of it is not
being tested and maybe there is some major bug that is missed as a result. This is
even more important when making software other people are going to use because then
a lot more things can go wrong. After all, the code may need to adapt to different computers
causing more issues that could be missed by testing.

## **FB3** Fuzzing

The basic idea of fuzzing is to test as many possible reasonable inputs as possible so if
you have a function that is supposed to receive a string. Then you can create a fuzzing
generator that creates a string of random characters and with that and a runner to run the
code you can test the limits of that specific function or program. This is a great way to
test your code with unorthodox inputs and while they may be unlikely it can still help find.
greater problems like let’s say you have a program that can only take a certain length of 
string before it crashes or if you’re doing something with math and a weird number or abnormally
large number causes crashes or bugs. A fuzzer is a great way to help find these issues as 
so many different numbers and characters can be used by the code as
inputs that having something to just check as many possibilities as possible can help improve
the program's efficiency and robustness.

### The **FuzzingBook** has a great example of a basic fuzzer:

```python
def fuzzer(max_length: int = 100, char_start: int = 32, char_range: int = 32) -> str:
    """A string of up to `max_length` characters
       in the range [`char_start`, `char_start` + `char_range`)"""
    string_length = random.randrange(0, max_length + 1)
    out = ""
    for i in range(0, string_length):
        out += chr(random.randrange(char_start, char_start + char_range))
    return out
```

### Use-case

This can be a very useful concept for helping to uncover bugs as in my experience with chasten
I've found a lot of bugs by just running the program with expected outputs. So, I can only 
imagine how many there are when there’s a lot of information it must sort through or when there’s
an unexpected input which isn't necessarily a bug, but it very well could be and the concept of 
something checking multiple different inputs and possibilities may help uncover many obscure bugs
and issues.

## **FB4** Mutation Analysis

Mutation analysis is just giving a function improper input on purpose the idea being if it.
can’t detect when an input is incorrect it won't be able to detect a bug. So, you can make functions that.
take a test case and change it in certain ways to see if the program notices the change and if it doesn’t.
you can have a problem. But you need to be careful when analyzing the mutations as they may be functionally
identical to the original meaning you haven't found a real issue.

An example of what you want to avoid is provided by the fuzzing book while being a bit extreme circumstance.

```python
def ineffective_test_2():
    try:
        execute_the_program_as_a_whole()
    except:
        pass
    assert True
```

While this technically runs the code and gets code coverage another important subject when it comes to testing
but that only checks if the test case runs all the code not if it checks what it’s supposed to. The above
test case always returns true because all it does is run the function and if the function doesn't run it still just.
returns true because when asserting it doesn't compare it to anything.

### Use-case

Mutation analysis is important when testing as you need to make sure your code is thoroughly testing what you want and
isn't giving any false negatives or false positives as then there may be a bug or issue you don't know about. While
you don't need to write a function to mutate it for you it’s good to maybe have test cases that purposely fail so
that you know your code won’t take improper inputs and run not finding any issues.

## **FB5** Mutation-Based Fuzzing

Since fuzzing and generating random inputs can often cause difficulties with syntax and may often just come up with unreasonable inputs you can fix this type of issue with mutation-based fuzzing. This works by only changing small things
for each input, so everything should be around the same structure with small differences this makes it so the inputs can be
more reasonable and are still checking what happens with your code. While this may make your testing less broad it helps get rid
of some of the redundant testing that happens when running a fuzzer most likely most of your tests are redundant.

```python
def mutate(s: str) -> str:
    """Return s with a random mutation applied"""
    mutators = [
        delete_random_character,
        insert_random_character,
        flip_random_character
    ]
    mutator = random.choice(mutators)
    # print(mutator)
    return mutator(s)
```

This is an example of a mutator it takes an input decides to use a function that changes it in some way and returns the resulting
value. This just changes small things to an already predefined input so it's not completely randomly generated so it's more focused testing.

### Use-Case

I believe this version of testing for chasten is a lot more useful and is kind of what hypothesis is used for while it's not the same
thing it allows you to focus your fuzzing through the use of strategies. So the concept itself is very useful making it so you not just
testing random inputs and similar but different inputs in a circumstance it's expected.

## **FB6** Fuzzing with Grammars

A **Grammar** is a way to represent syntax rules which is very useful for fuzzing because if you have something that's
supposed to take a very structured input that can be very difficult to test with just normal fuzzing as the vast majority
of the inputs will fail. A **Grammar** fixes this by allowing you to set it up in a way that follows that structure and gives
inputs that should be expected to the function and tests it that way instead of giving completely random inputs. It still gives
it different combinations but they are all structurally correct.

A good example of a Grammar is below from the **Fuzzing Book**:

```python
>>> US_PHONE_GRAMMAR: Grammar = {
>>>     "<start>": ["<phone-number>"],
>>>     "<phone-number>": ["(<area>)<exchange>-<line>"],
>>>     "<area>": ["<lead-digit><digit><digit>"],
>>>     "<exchange>": ["<lead-digit><digit><digit>"],
>>>     "<line>": ["<digit><digit><digit><digit>"],
>>>     "<lead-digit>": ["2", "3", "4", "5", "6", "7", "8", "9"],
>>>     "<digit>": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
}
```

The Grammar above gets you a properly structured phone number and it uses only things that would be in a phone number.
this allows you to generate a phone number for fuzzing in the proper structure and in a way that it could be a real phone number.

### Use-Case

This is very useful for Chasten as it takes a lot of highly structured inputs making normal fuzzing not good enough for the purposes
of testing a large majority of the tool but with Grammars we can get those structured inputs but also some of the randomness that comes
with fuzzing so its a bit of best of both worlds and its very useful for testing tools like Chasten.

## **FB7** Efficient Grammar Fuzzing

Normal fuzzing with Grammars is not the efficient because it has the possibility have making things expand infinitely in this chapter.
it talks about using trees to help deal with this. Using a tree allows you to make the different parts of the Grammar into nodes which.
each have a max length. It can also decide on which part should be changed depending on how much time it takes so if changing one node.
costs significantly less time and memory than another you can set it up, so it prioritizes changes that one over the rest. It gets the
results from the leaf’s which are nodes without children so you can have the root node which has children which may be the different
parts of the structure which also have children which in the case of something like a string may represent a character. So anytime something
is changed its not creating a new string or integer or anything like that it doesn't change what is already there it either removes or adds.
to it. Making it faster and allowing you to control it more.

### Use-case.

This is useful in that it's just a more efficient way to use Grammars but I feel that it isn't too useful overall with chasten as I
don't believe chasten requires anything this complex to test a lot of its basic functions. So, while it is useful, I don't think it's something that will majorly change how at least in this circumstance changes how we write test cases.

