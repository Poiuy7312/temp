---
title: "Professional Pr√©cis Fuzzing Book"
subtitle: "Preston Smith"
---

## **FB1** Introduction to Software Testing

It is important to test your code and be able to understand it. You can test your code by
putting in inputs you know the expected outcome for and compare or you can write a test
case for it which will automatically test and compare the actual output and the set expected
output for you. In some cases you can even in a way generate a test case the **Fuzzingbook**
has a really good example of this.

```python
def assertEquals(x, y, epsilon=1e-8):
    assert abs(x - y) < epsilon
```
This is for testing a Square root function as $\sqrt{n} * \sqrt{n} = n$.
Since that is always true you don't really need a test case for different types
of numbers. You should also check for invalid inputs so if someone trys to put
a string into something that calculates squares thats obviously not going to
work so your code should account for that in someway. **Fuzzingbook** has another
good example of this

```python
def sqrt_program(arg: str) -> None:  # type: ignore
    try:
        x = float(arg)
    except ValueError:
        print("Illegal Input")
    else:
        if x < 0:
            print("Illegal Number")
        else:
            print('The root of', x, 'is', my_sqrt(x))
```

Overall writing test cases and testing your code can be very beneficial not only
for chasten but anything you do as it will make your code more polished proffesional
and easier to use for anyone trying to.
