---
title: "Professional Pr√©cis SE Book"
subtitle: "Preston Smith"
---

## **SE1** [Programming Overtime](https://abseil.io/resources/swe-book/html/pr01.html#programming_over_time)
The difference between software engineering and programming is professionalism and
consistency ultimately software engineering can be defined as programming integrated over time.
What can someone do to make a code sustainable and improve upon in the future what are some
tools that can be used to make something more efficient all of this is software engineering.
There are three things to take into account according to The section **Programming Overtime**
in the book Software Engineering at Google.

- How the code will need to be changed over its lifetime

- How you will have to adapt as things change and evolve

- Take into account Time change Scale and growth when making a decision.

### Use-case
I believe this way of thinking is not only beneficial to Chasten but almost any software
engineering project in general because, at the end of the day, all it's saying is to expect things
to change. And how you need to make decisions which means you may not be able to do everything
you wanted to which I feel should be somewhat expected a lot of the time.

## **SE2** [What is Software Engineering?](https://abseil.io/resources/swe-book/html/ch01.html)

Once again Software Engineering is defined as programming over time but this time in more detail.
While a programming project might be a single-person endeavor a software engineering project is
a team effort. Teamwork is very important for these types of projects as while working as a team can
have its issues the amount you can do with more people is much greater. You have to take into account
problems and changes to the software appearing as it is being made and when it is already released.
You need to make trade-offs between how much money or time something is gonna cost and how much benefit
it will have for the software. A software engineering project is expected to last for years and with
that needs to be amiable to changes as maybe the dependencies it uses to change the OS changes and also
competition at least at a large scale that might arise to not be overshadowed by superior software.

### Use-Case
This way of thinking while I don't think entirely applicable to chasten I think the importance of
working together and taking into account how things change is very important especially since overall
we seem to be having problems working together and being organized. This has led to things not being
done on time and multiple people being confused about what they should do and what they are doing. So I think
communication with each other is very important for chasten and software in general and after that
comes the more complicated questions on how chasten may change over time how long we want it to
last and how amicable it is are second to teamwork.

## **SE3** [How to Work Well on Teams](https://abseil.io/resources/swe-book/html/ch02.html)

Teamwork is an important aspect of Software Engineering almost every major accomplishment in
Software Engineering was accomplished by groups of people, not one person by themselves. While
Linus Torvalds created the framework for Linux the vast majority of its current form was made
by other people there is not just one person who's good at everything many people are required
to make something truly great even if you might consider someone a genius. It doesn't require
a genius to make something important just a team of individuals who communicate, cooperate and
criticize to get the best possible product or result. Michael Jordan didn't win six championships
as an individual he one them as a part of the Chicago Bulls basketball team. 

### Use-Case

This is very important to keep in mind two minds are better than one you aren't going to be able
to do everything on your own. For chasten, while it's not the largest project it is certainly not something
we can achieve as individuals almost everything we do can affect someone else's work making it important
that we communicate what we are doing and why we are doing it. Things get done faster and often better when
working together.

## **SE4** [Knowledge Sharing](https://abseil.io/resources/swe-book/html/ch03.html)

People in your organization or team should understand the problems of your software better than the
internet. Often what happens is people withhold information so people will have a lot of information about
a certain part but when they need to work with a different part of the program they don't have the knowledge
needed to work efficiently. This is not what you want you want everyone to be properly educated on the software
they're working on. This also causes people working in the same team to do things differently because they have
different information which can cause conflicts and confusion slowing down the process of making a proper
software program. Relating to the bus factor if one person has all the information on a subject and they get
hit by a bus all the information is gone setting the project back significantly depending on what that person
withheld then having to need people figure it out for themselves.

### Use-Case

With Chasten, a lot of people only have information on certain parts of the software and this causes problems when
these people aren't present as then we have no information on possibly a major part of the program leaving everyone
I guess what is going on. Some people barely know the basics of the program so they may be assigned to a task and
making very little progress because they don't have the information required and no one would know as it's not
communicated.

## **SE5** [Engineering for Equity](https://abseil.io/resources/swe-book/html/ch04.html)

Often with Software engineering especially on a large scale as in something like Google, it is important
to keep in mind the broad amount of people that will be using your product. You need to make sure you are aware of 
some cultural differences and are proactive about finding and discovering problems in your software that may not affect
you directly. A good example is brought up in this chapter where a software engineer found that Google image search
algorithms would have black people show up when searching gorilla which is very bad. This was a major oversight from Google
and is a result of them not including enough data on underrepresented people and just didn't think this could be
an issue. It's also important to realize not everyone who uses your software is an expert so it should be easy to use and 
understand or at least fairly intuitive. If it's not then you objectively have a bad product that may be clunky to use and has
unintended issues that may anger people or offend them.

### Use-Case

I think within this class I think the idea of thinking about who is using your software is very important and expecting many
different types of people to use it. And while there probably won't be anything as serious as what happened with Google it's still
important to design software with other people in mind not just the ones making it.

## **SE6** [How to Lead a Team](https://abseil.io/resources/swe-book/html/ch05.html)

In a software engineering team there needs to be some form of leader otherwise the team may be directionless and unorganized.
While it is good to have everyone to contribute to conversations you can't have everyone lead themselves as this causes groups
to be disjointed and inefficient. It's important to have someone to make sure things are getting done teams are properly staffed
to fix an issue or add a feature. A lot of people avoid taking on a manager type of role because they often feel like they didn't
do anything because you'll often be written less code. It also is significantly more responsibilty and in return stress.

### Use-case

I think having a leader would be very important for the class and while we do technically have leaders they change everyweek which
leads to different things being the focus each week or there not being a focus at all leading to nothing really getting done at a
reasonable pace. The leaders being changed everyweek also causes people who may not be ready for that responsibility and there being
forced into that situation which is fine in a classroom circumstance because it's relativly low stakes but I believe it's partially
one of the reasons alot of issues have taken alot longer than expected to fix.

## **SE7** [Leading at Scale](https://abseil.io/resources/swe-book/html/ch06.html)

The more you move up in a leadership possions the less your technical abiltitys and understanding of the project really matter. The
farther up you go the more broad problems you will be asked to handle but they won't be as deep as ones your used to solving. You also
need to make trade-offs as a leader its important to understand everything has a give and take. It's important that you can be making these
descisions and understand why they need to be made. You'll be constantly having to make new descicions and its important to make the best
descisions you possibly can with maybe not the best understanding of the situation and its your job to guide the total direction of the group.

### Use-case

There isn't really much of a Useful thing for us specifically right now because the scale will never be that large but the overall concept
of what it means to be an effective leader is important for people to understand in general. It's also important understand what taking
on a leadership position actually implies and the types of responsibilties you will have and be expected to deal with.
