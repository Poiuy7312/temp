---
title: "Professional Pr√©cis SE Book"
subtitle: "Preston Smith"
---

## **SE1** [Programming Overtime](https://abseil.io/resources/swe-book/html/pr01.html#programming_over_time)
The difference between software engineering and programming is really professionalism and
consistency ultimetly software engineering can be defined as programming integrated overtime.
What can someone do to make a code sustainable and improve upon in the future what are some
tools that can be used to make something more efficient all of this is software engineering.
There are three things to take into account according to The section **Programming Overtime**
in the book Software Engineering at Google.

- How the code will need to be changed over its life time

- How you will have to adapt as things change and evolve

- Take into account Time change Scale and growth when making a decision.

### Use-case
I belive this way of thinking is not only beneficial to Chasten but almost any software
engineering project in general because at the end of the day all its saying is expect things
to change. And how you need to make decisions which means you may not be able to do everthing
you wanted to which I feel should be somewhat expected alot of the time.

## **SE2** [What is Software Engineering?](https://abseil.io/resources/swe-book/html/ch01.html)

Once again Software Engineering is defined as programming overtime but this time in more detail.
While a programming project might be a single person endeavor a software engineering project is
a team effort. Teamwork is very important for these types of projects as while working as a team can
have it owns issues the amount you can do with more people is much greater. You have to take into account
problems and changes to the software appearing as its being made and when its already released.
You need to make trade offs between how much money or time something is gonna cost and how much benefit
it will have for the software. A software engineering project is expected to last for years and with
that needs to be amiable to changes as maybe the dependencies it uses change the OS changes and also
competition at least at a large scale that might arise as to not be overshadowed by superior software.

### Use-Case
This way of thinking while I don't think entirely applicable to chasten I think the importance of
working together and take into account how things change is very important especially since overall
we seem to be having problems working together and being organized. This has lead to things not being
done on time multiple people being confused on what they should do and what they are doing. So I think
communication with each other is very important for chasten and software in general and after that
comes the more complicated questions on how chasten may change overtime how long do we want it to
last and how amicable it is are second to teamwork.

