---
title: "Professional Pr√©cis SE Book"
subtitle: "Preston Smith"
---

## **SE1** [Programming Overtime](https://abseil.io/resources/swe-book/html/pr01.html#programming_over_time)
The difference between software engineering and programming is really professionalism and
consistency ultimetly software engineering can be defined as programming integrated overtime.
What can someone do to make a code sustainable and improve upon in the future what are some
tools that can be used to make something more efficient all of this is software engineering.
There are three things to take into account according to The section **Programming Overtime**
in the book Software Engineering at Google.

- How the code will need to be changed over its life time

- How you will have to adapt as things change and evolve

- Take into account Time change Scale and growth when making a decision.

### Use-case
I belive this way of thinking is not only beneficial to Chasten but almost any software
engineering project in general because at the end of the day all its saying is expect things
to change. And how you need to make decisions which means you may not be able to do everthing
you wanted to which I feel should be somewhat expected alot of the time.

## **SE2** [What is Software Engineering?](https://abseil.io/resources/swe-book/html/ch01.html)

Once again Software Engineering is defined as programming overtime but this time in more detail.
While a programming project might be a single person endeavor a software engineering project is
a team effort. Teamwork is very important for these types of projects as while working as a team can
have it owns issues the amount you can do with more people is much greater. You have to take into account
problems and changes to the software appearing as its being made and when its already released.
You need to make trade offs between how much money or time something is gonna cost and how much benefit
it will have for the software. A software engineering project is expected to last for years and with
that needs to be amiable to changes as maybe the dependencies it uses change the OS changes and also
competition at least at a large scale that might arise as to not be overshadowed by superior software.

### Use-Case
This way of thinking while I don't think entirely applicable to chasten I think the importance of
working together and take into account how things change is very important especially since overall
we seem to be having problems working together and being organized. This has lead to things not being
done on time multiple people being confused on what they should do and what they are doing. So I think
communication with each other is very important for chasten and software in general and after that
comes the more complicated questions on how chasten may change overtime how long do we want it to
last and how amicable it is are second to teamwork.

## **SE3** [How to Work Well on Teams](https://abseil.io/resources/swe-book/html/ch02.html)

Teamwork is an important aspect of Softare Engineering almost every major accomplishment in
Software Engineering was accomplished by groups of people not one person by themselves. While
Linus Torvalds created the framework for Linux the vast majority of its current form was made
by other people their is not just one person who's good at everything many people are required
to make something truelly great even if you might consider someone a genius. It doesn't require
a genius to make something important just a team of individuals who communicate, cooperate and
criticize to get the best possible product or result. Michael Jordan didn't win six championships
as an individual he one them as a part of the Chicago Bulls basketball team. 

### Use-Case

This is very important to keep in mind two minds are better then one you aren't going to be able
to do everything on your own. For chasten while its not the largest project it certainly not something
we can achieve as individuals almost everything we do can effect someone elses work making it important
that we communicate what where doing and why were doing it. Things get done faster and often better when
working together.

## **SE4** [Knowledge Sharing](https://abseil.io/resources/swe-book/html/ch03.html)

People in your organization or team should understand the problems of your software better than the
internet. Often what happens is people with hold information so people will have a lot of information of
a certain part but when they need to work with a different part of the program they don't have the knowledge
needed to work efficiently. This is not what you want you want everyone to be properly educated on the software
there working on. This also causes people working in the same team to do things differently because they have
different information which can cause conflicts and confusion slowing down the process of making a proper
software program. Relating to the bus factor if one person has all information on a subject and they get
hit by a bus all the information is gone setting the project back significantly depending on what that person
withheld then having to need people figure it out for themselves.

### Use-Case

With Chasten alot of people only have information on certain parts of the software and this causes problems when
these people aren't present as then we have no information on possibly a major part of the program leaving everyone
guessing what is going on. Some people barely know the basics of the program so they may be assigned to a task and
making very little progress because they don't have the information required and no-one would know as it's not
communicated.